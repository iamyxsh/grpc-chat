// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: contactspb/contacts.proto

package contactspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactsServiceClient is the client API for ContactsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactsServiceClient interface {
	AddContacts(ctx context.Context, in *ContactsRequest, opts ...grpc.CallOption) (*ContactsResponse, error)
	RemoveContacts(ctx context.Context, in *ContactsRequest, opts ...grpc.CallOption) (*ContactsResponse, error)
}

type contactsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactsServiceClient(cc grpc.ClientConnInterface) ContactsServiceClient {
	return &contactsServiceClient{cc}
}

func (c *contactsServiceClient) AddContacts(ctx context.Context, in *ContactsRequest, opts ...grpc.CallOption) (*ContactsResponse, error) {
	out := new(ContactsResponse)
	err := c.cc.Invoke(ctx, "/contactspb.ContactsService/AddContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsServiceClient) RemoveContacts(ctx context.Context, in *ContactsRequest, opts ...grpc.CallOption) (*ContactsResponse, error) {
	out := new(ContactsResponse)
	err := c.cc.Invoke(ctx, "/contactspb.ContactsService/RemoveContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServiceServer is the server API for ContactsService service.
// All implementations must embed UnimplementedContactsServiceServer
// for forward compatibility
type ContactsServiceServer interface {
	AddContacts(context.Context, *ContactsRequest) (*ContactsResponse, error)
	RemoveContacts(context.Context, *ContactsRequest) (*ContactsResponse, error)
	mustEmbedUnimplementedContactsServiceServer()
}

// UnimplementedContactsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContactsServiceServer struct {
}

func (UnimplementedContactsServiceServer) AddContacts(context.Context, *ContactsRequest) (*ContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContacts not implemented")
}
func (UnimplementedContactsServiceServer) RemoveContacts(context.Context, *ContactsRequest) (*ContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContacts not implemented")
}
func (UnimplementedContactsServiceServer) mustEmbedUnimplementedContactsServiceServer() {}

// UnsafeContactsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactsServiceServer will
// result in compilation errors.
type UnsafeContactsServiceServer interface {
	mustEmbedUnimplementedContactsServiceServer()
}

func RegisterContactsServiceServer(s grpc.ServiceRegistrar, srv ContactsServiceServer) {
	s.RegisterService(&ContactsService_ServiceDesc, srv)
}

func _ContactsService_AddContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).AddContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contactspb.ContactsService/AddContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).AddContacts(ctx, req.(*ContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactsService_RemoveContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServiceServer).RemoveContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contactspb.ContactsService/RemoveContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServiceServer).RemoveContacts(ctx, req.(*ContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactsService_ServiceDesc is the grpc.ServiceDesc for ContactsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contactspb.ContactsService",
	HandlerType: (*ContactsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContacts",
			Handler:    _ContactsService_AddContacts_Handler,
		},
		{
			MethodName: "RemoveContacts",
			Handler:    _ContactsService_RemoveContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contactspb/contacts.proto",
}
